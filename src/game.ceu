#define CEU_SDL_MODE_FRAME (1000/60)
#include "c.ceu"
#include "sdl/sdl.ceu"

#define WINDOW_W 800
#define WINDOW_H 576

#define GLYPH_W 48
#define GLYPH_H 64

#define PI 3.1415926535897932

var&? SDL_Init sdl =
    spawn SDL_Init("Gravity Platformer", WINDOW_W, WINDOW_H, SDL_Color(0xFF,0xFF,0xFF,0xFF));

native _log10;
native/const 
    _SDL_FLIP_NONE, 
    _SDL_FLIP_VERTICAL,

    _SDLK_SPACE;
native/plain  _SDL_RendererFlip;
native/nohold 
    _SDL_RenderCopyEx,
    _SDL_SetTextureBlendMode,
    _SDL_SetTextureAlphaMod;

watching sdl do
    var int highScore = 0;
    loop do
        var int runSpeed = 200;
        var int minRunSpeed = runSpeed;
        var int score = 1;
		var int scorelength;
        event void gameOver;
        event void scoreUpdate;

        #include "utilities.ceu"
        #include "platform.ceu"

	    pool[] Platform platforms; 

	    #include "particle.ceu" 

		pool[] Particle particles;
       
		#include "collectible.ceu"

		pool[] Collectible collectibles;

        #include "player.ceu" 

        var int minimumSize = 8;
        var int yVariation = 2;

        code/tight WidthToMS (var int w) -> int do
            escape ((1000 * w)/outer.runSpeed);
        end

        native/pre do
            ##include <time.h>
        end

        _srand(_time(null));

        var int side = -1;

        var int x = 0;
        var int y = 10;
        var int w = 20;
        
        scorelength = _log10(score) + 1;

		vector[] byte string = [ {'a'},{'b'},{'c'} ];
		string = string .. [ 70 ];
		//var _char&& string = _;
		_printf("%s\n", &&string[0]);

        var& SDL_Open_Image img_scorefont =
        spawn SDL_Open_Image(&sdl!.ren, "res/font.png");
        
        spawn Platform(x,y * img_block_h,w,1) in platforms;
        var& Player player = spawn Player(72, (y-0.5) * img_block_h);
        var int t = call WidthToMS((w * img_block_w) - WINDOW_W);
        await (t)ms;

        par/or do
            loop do
                w = minimumSize + _rand()%10;
                x = WINDOW_W;
				var int vShift = 2+_rand()%yVariation;
                y = (5 + side*vShift) * img_block_h;

                if (_rand()%1000 > 0) then
                    w = w + 20;
					spawn Collectible(WINDOW_W + (w>>1) * img_block_w, (5 - side*4) * img_block_h) in collectibles;
                end

                spawn Platform(x,y,w,side) in platforms;
                t = call WidthToMS(w * img_block_w);
                //_printf("Y=%d, To wait: %d ms\n", y, t);
                await (t)ms;
                side = side * -1;
                runSpeed = runSpeed + 10;
                player.fallSpeed = player.fallSpeed + 20;
                if (runSpeed%120 == 0 and minimumSize > 3) then
                    minimumSize = minimumSize-1;
                end
                if (runSpeed%190 == 0 and yVariation < 3) then
                    yVariation = yVariation+1;
                end
                score = score+1;
                scorelength = _log10(score) + 1;
            end
        with
            every SDL_REDRAW do
                var int i;
                var int scoreRem = score;
                var int scoreDigit;
                var int baseX = ((WINDOW_W>>1) + (((scorelength-1) as float)/2.0 - 0.5) * (GLYPH_W)) as int ;
                loop i in [0 -> scorelength[ do
                    scoreDigit = scoreRem%10;
                    scoreRem = scoreRem/10;
                    var SDL_Rect score_rect = val SDL_Rect(baseX - (GLYPH_W*i), (WINDOW_H)-GLYPH_H, GLYPH_W, GLYPH_H);
                    var SDL_Rect clip_rect = val SDL_Rect(scoreDigit * GLYPH_W, 0, GLYPH_W, GLYPH_H);
                    _SDL_RenderCopy(&&sdl!.ren, &&img_scorefont.tex.tex, &&clip_rect as _SDL_Rect&&, &&score_rect as _SDL_Rect&&);
                end
            end
        with
            await gameOver;
            if (score > highScore) then
                _printf("=================================\n");
                _printf("A NEW HIGHSCORE! YOU SCORED %d.\n", score);
                _printf("=================================\n\n");
                highScore = score;
            end
        end
    end
end

escape 0;
